
.SUFFIXES: .cc

SPATIALINDEX_HOME=.
DLL_VERSION = 1


###############################################################################
# Set BUILD_DEBUG balue to YES if you want to make debug build
# and to prepare not optimized binaries.
!IFNDEF BUILD_DEBUG 
BUILD_DEBUG = NO
!ENDIF


###############################################################################
# Derive version of Visual C++ being used from NMAKE if not specified
#
# WARNING:
# If we should expect variety of NMAKE build versions, tests below may fail
# and we will need to fall back to setting MSVCVER as command line parameter.
#
!IF "$(_NMAKE_VER)" == ""
MSVCVER = 4.0
!ERROR *** Failed to determine version of Visual C++
!ELSEIF "$(_NMAKE_VER)" == "162"
MSVCVER = 5.0
!ERROR *** Detected Visual C++ 5.0 - NOT SUPPORTED
!ELSEIF "$(_NMAKE_VER)" == "6.00.8168.0"
MSVCVER = 6.0
!ERROR *** Detected Visual C++ 6.0 - NOT SUPPORTED
!ELSEIF "$(_NMAKE_VER)" == "7.00.9466"
MSVCVER = 7.0
!ELSEIF "$(_NMAKE_VER)" == "7.10.3077"
MSVCVER = 7.1
!ELSEIF "$(_NMAKE_VER)" == "8.00.50727.42"
MSVCVER = 8.0
!ELSEIF "$(_NMAKE_VER)" == "8.00.50727.762"
MSVCVER = 8.0
!ELSEIF "$(_NMAKE_VER)" == "9.00.21022.08"
MSVCVER = 9.0
!ELSEIF "$(_NMAKE_VER)" == "9.00.30729.01"
MSVCVER = 9.0
!ELSE
MSVCVER = 0.0
!ENDIF

!IF "$(MSVCVER)" == "0.0"
!MESSAGE *** Cannot determined Visual C++ version
!ERROR *** Aborting make job
!ELSE
!MESSAGE *** Using Microsoft NMAKE version $(_NMAKE_VER)
!MESSAGE *** Using Microsoft Visual C++ version $(MSVCVER)
!ENDIF

###############################################################################
# Compilation flags for Release and Debug modes

!IF "$(BUILD_DEBUG)" == "YES"
OPTFLAGS= /nologo /MDd /EHsc /Z7 /W4 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DDEBUG /D_DEBUG /DDEBUG /Fd$(SPATIALINDEX_HOME)\spatialindex.pdb
LAS_LIB = spatialindex_d.lib
LAS_DLL = spatialindex_d$(DLL_VERSION).dll
LAS_LIB_DLL = spatialindex_i.lib
!ELSE

# You may need to remove /GR if you are statically linking libLAS
OPTFLAGS=/nologo /MD /EHsc /Ox /GR /W2 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNDEBUG /D "PACKAGE_BUGREPORT=\"hobu.inc@gmail.com\""
LAS_LIB = spatialindex.lib
LAS_DLL = spatialindex$(DLL_VERSION).dll
LAS_LIB_DLL = spatialindex_i.lib
!ENDIF

# Check if multiple process build available
!IF "$(MSVCVER)" == "9.0"
MPFLAGS=/MP
!MESSAGE *** Using /MP flag with number of effective processors
!ELSE
MPFLAGS=""
!ENDIF


INCLUDES=-I$(SPATIALINDEX_HOME)/include
CFLAGS= $(MPFLAGS) $(OPTFLAGS) $(INCLUDES) 


# Commands
#
MAKE = nmake
RM = -del
CC=     cl
LINK=   link

LAS_DIRLIST =  src\mvrtree \
                src\rtree \
                src\spatialindex \
                src\storagemanager \
                src\tools \
                src\tprtree

OBJS = 	src\mvrtree\Index.obj \
        src\mvrtree\Leaf.obj \
        src\mvrtree\MVRtree.obj \
        src\mvrtree\Node.obj \
        src\mvrtree\Statistics.obj \
        src\rtree\BulkLoader.obj \
        src\rtree\Index.obj \
        src\rtree\Leaf.obj \
        src\rtree\Node.obj \
        src\rtree\RTree.obj \
        src\rtree\Statistics.obj \
        src\spatialindex\LineSegment.obj \
        src\spatialindex\MovingPoint.obj \
        src\spatialindex\MovingRegion.obj \
        src\spatialindex\Point.obj \
        src\spatialindex\Region.obj \
        src\spatialindex\SpatialIndexImpl.obj \
        src\spatialindex\TimePoint.obj \
        src\spatialindex\TimeRegion.obj \
        src\storagemanager\Buffer.obj \
        src\storagemanager\DiskStorageManager.obj \
        src\storagemanager\MemoryStorageManager.obj \
        src\storagemanager\RandomEvictionsBuffer.obj \
        src\tools\ExternalSort.obj \
        src\tools\TemporaryFile.obj \
        src\tools\rand48.obj \
        src\tools\Tools.obj \
        src\tprtree\Index.obj \
        src\tprtree\Leaf.obj \
        src\tprtree\Node.obj \
        src\tprtree\Statistics.obj \
        src\tprtree\TPRTree.obj 
        

default: $(LAS_DLL)

all: default


$(LAS_LIB):	$(OBJS)
    if exist $(LAS_LIB) del $(LAS_LIB)
    $(LINK) /lib /nologo /out:$(LAS_LIB) $(OBJS)
	
$(LAS_DLL):	$(LAS_LIB) $(RES)
    $(LINK) /dll \
            $(OBJS) $(LAS_LIB) \
            /out:$(LAS_DLL) /implib:$(LAS_LIB_DLL)
    if exist $(LAS_DLL).manifest mt -manifest $(LAS_DLL).manifest -outputresource:$(LAS_DLL);2   

   
.cc.obj:                          
	$(CC) $(CFLAGS) /c $*.cc /Fo$@

.c.obj:
	$(CC) $(CFLAGS) /c $*.c /Fo$@

clean:
	$(RM) $(LAS_LIB)
	$(RM) $(LAS_DLL)
	$(RM) *.ilk
	$(RM) *.manifest
	$(RM) *.obj
	$(RM) *.pdb
	for %d in ( $(LAS_DIRLIST) ) do \
		del %d\*.obj 	

